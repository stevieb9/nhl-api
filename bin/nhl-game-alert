#!/usr/bin/env perl

use warnings;
use strict;

use Data::Dumper;
use DateTime::Format::ISO8601;
use File::HomeDir;
use Getopt::Long qw(:config no_ignore_case);
use IPC::Shareable;
use JSON;
use NHL::API;
use POSIX qw(strftime);
use SMS::Send;

# Twilio API config format (~/twilio_api.json)
# {
#     "_accountsid": "Twilio Account ID hash",
#     "_authtoken": "Twilio Auth Token hash",
#     "_from": "+Your Twilio Phone number"
# }

my ($home_dir, $twilio_sender);

BEGIN {
    $home_dir = File::HomeDir->my_home;

    # Twilio API creds
    {
        local $/;

        open my $twilio_conf, '<', "$home_dir/twilio_api.json" or die
            "Can't open '$home_dir/twilio_api.json' to get API creds...";

        my $json = <$twilio_conf>;

        my $twilio_api_creds = decode_json $json;

        $twilio_sender = SMS::Send->new(
            'Twilio',
            %$twilio_api_creds
        )
    }
}

my ($help, @alert_times, @recipients, @teams, $cache_reset);

GetOptions(
    "help|h"        => \$help,
    "alert|a=s"     => \@alert_times,
    "recipient|r=s" => \@recipients,
    "team|t=s"      => \@teams,
    "cache|c"       => \$cache_reset,
);

help() if ! scalar @alert_times;
help() if ! scalar @recipients;
help() if ! scalar @teams;

tie my %sent_cache, 'IPC::Shareable', {
    key     => 'NHL GAME ALERTS SENT',
    create  => 1,
    tidy    => 1,
};

my $nhl = NHL::API->new;

@alert_times = sort { $b <=> $a } @alert_times;

my $date = strftime("%Y-%m-%d", localtime);

for my $team (@teams) {

    my $game_time = $nhl->game_time($team);
    next if ! $game_time;

    my $dt_now = DateTime->now;
    $dt_now->set_time_zone('America/Vancouver');

    my $dt_game = DateTime::Format::ISO8601->parse_datetime($game_time);
    $dt_game->set_time_zone('America/Vancouver');

    if ($dt_game > $dt_now) {
        my $until_game_dt = $dt_game - $dt_now;
        my $minutes_to_game = $until_game_dt->in_units('minutes');

        for my $alert_time (@alert_times) {
            if ($cache_reset) {
                _cache_reset($team, $date, $alert_time);
                next;
            }

            if ($minutes_to_game < $alert_time) {
                if (! alert_sent($team, $date, $alert_time)) {
                    my $message_game_date = $dt_game->strftime("%Y-%m-%d %H%M");
                    my $message = "$team are playing in less than $alert_time minutes at $message_game_date hrs";
                    print "$message\n";

                    for (@recipients) {
                        send_message($_, $message);
                    }
                    _cache_set($team, $date, $alert_time);
                    last;
                }
            }
        }
    }
}

sub alert_sent {
    my ($team, $date, $alert_time) = @_;

    my $team_cache = _cache_get($team);

    my $sent = 0;

    if (exists $team_cache->{$alert_time}) {
        my $alert_cache = $team_cache->{$alert_time};

        if (keys %$alert_cache && $alert_cache->{date} eq $date) {
            $sent = $alert_cache->{sent};
        }
    }

    return $sent;
}
sub send_message {
    my ($recipient, $message) = @_;

    if ($recipient !~ /^\+/) {
        $recipient = '+' . $recipient;
    }

    my $sent = $twilio_sender->send_sms(
        text => $message,
        to   => $recipient
    );

    if (! $sent) {
        warn "Couldn't send NHL alert to '$recipient'\n";
    }
}

sub _cache_get {
    my ($team) = @_;
    return $sent_cache{$team};
}
sub _cache_set {
    my ($team, $date, $alert_time) = @_;

    $sent_cache{$team}{$alert_time}{date} = $date;
    $sent_cache{$team}{$alert_time}{sent} = 1;
}
sub _cache_reset {
    my ($team, $date, $alert_time) = @_;

    if (exists $sent_cache{$team}) {
        $sent_cache{$team}{$alert_time}{date} = $date;
        $sent_cache{$team}{$alert_time}{sent} = 0;
    }
}
sub _cache_flush {
    %sent_cache = ();
}
sub _twilio_creds {
    my ($self) = @_;



}

sub help {
    print <<EOF;

Usage: nhl-game-alert <OPTIONS>

Options:

-h | --help         Print this help message
-a | --alert        Mandatory, Strings: Minutes before game to alert at. Can be supplied multiple times
-r | --recipient    Mandatory, Strings: Country code plus phone number to send the alert to. Can be supplied multiple times
-t | --team         Mandatory, Strings: Team you want to check for. Can be supplied multiple times
-c | --cache        Reset the cache that stores whether we've sent alerts or not

EOF

    exit;
}